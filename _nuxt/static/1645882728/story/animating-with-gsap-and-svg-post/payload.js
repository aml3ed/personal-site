__NUXT_JSONP__("/story/animating-with-gsap-and-svg-post", (function(a){return {data:[{story:{id:"ckzzox8a0twy20c76tw7sozjk",title:"Animating with GSAP and SVG",publishedAt:"2022-02-23T16:40:14.117524+00:00",content:{html:"\u003Cp\u003E\u003Cem\u003E\u003Cstrong\u003ENote\u003C\u002Fstrong\u003E\u003C\u002Fem\u003E\u003Cem\u003E: This is a reposting of a blog post I wrote originally for \u003C\u002Fem\u003E\u003Ca target='_blank' title=\"https:\u002F\u002Fwww.simplethread.com\" href=\"https:\u002F\u002Fwww.simplethread.com\"\u003E\u003Cem\u003ESimple Thread\u003C\u002Fem\u003E\u003C\u002Fa\u003E\u003Cem\u003E.\u003C\u002Fem\u003E\u003C\u002Fp\u003E\u003Ch2\u003E\u003Cstrong\u003EI used to work as a motion graphics artist.\u003C\u002Fstrong\u003E\u003C\u002Fh2\u003E\u003Cp\u003ESo, for a long time, I’ve wanted to delve into SVG animation to see what it’s like combining my love of the web with my love for \u003Ca title=\"https:\u002F\u002Fen.wikipedia.org\u002Fwiki\u002FMotion_graphics\" href=\"https:\u002F\u002Fen.wikipedia.org\u002Fwiki\u002FMotion_graphics\"\u003Emograph\u003C\u002Fa\u003E. And last week, I got my chance.\u003C\u002Fp\u003E\u003Cp\u003EFor one of our clients, we needed to keep the user occupied while an external API returned some data. Obviously, the simple solution was to show a loading page with a spinner that looped until the API request completed. But rather than just grabbing a free CSS spinner from \u003Ca title=\"https:\u002F\u002Floading.io\u002Fcss\u002F\" href=\"https:\u002F\u002Floading.io\u002Fcss\u002F\"\u003Eloading.io\u003C\u002Fa\u003E, I decided to use this as an opportunity to create a custom loading spinner made from their logo using SVG and GSAP. You can check it out in this codepen below:\u003C\u002Fp\u003E\u003Cp\u003E\u003C\u002Fp\u003E\u003Ciframe\n          width=\"100\"\n          height=\"450\"\n          frameBorder=\"0\"\n          allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n          allowFullScreen\n          title=\"https:\u002F\u002Fcodepen.io\u002Fitsjustdrewit\u002Fembed\u002FvYZoMGj?height=450&theme-id=dark&default-tab=result&slug-hash=vYZoMGj&user=itsjustdrewit&name=cp_embed_1\"\n          src=\"https:\u002F\u002Fcodepen.io\u002Fitsjustdrewit\u002Fembed\u002FvYZoMGj?height=450&theme-id=dark&default-tab=result&slug-hash=vYZoMGj&user=itsjustdrewit&name=cp_embed_1\"\n        \u003E\u003C\u002Fiframe\u003E\u003Cp\u003EYou can look through the source code to see how it works, but in the rest of this article, I’ll show you how to create this much simpler spinner out of the Simple Thread logo. Let’s get started.\u003C\u002Fp\u003E\u003Cp\u003E\u003C\u002Fp\u003E\u003Ciframe\n          width=\"100\"\n          height=\"100\"\n          frameBorder=\"0\"\n          allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n          allowFullScreen\n          title=\"https:\u002F\u002Fcodepen.io\u002Fitsjustdrewit\u002Fembed\u002FdyRLpgo?height=450&theme-id=dark&default-tab=result&slug-hash=dyRLpgo&user=itsjustdrewit&name=cp_embed_2\"\n          src=\"https:\u002F\u002Fcodepen.io\u002Fitsjustdrewit\u002Fembed\u002FdyRLpgo?height=450&theme-id=dark&default-tab=result&slug-hash=dyRLpgo&user=itsjustdrewit&name=cp_embed_2\"\n        \u003E\u003C\u002Fiframe\u003E\u003Ch2\u003E\u003Cstrong\u003EWait…what is GSAP and what are SVGs?\u003C\u002Fstrong\u003E\u003C\u002Fh2\u003E\u003Cp\u003E\u003Cstrong\u003EThe GreenSock Animation Platform\u003C\u002Fstrong\u003E (or GSAP) is a Javascript library that enables us to make programmatic animations of HTML elements. It’s incredibly powerful on its own, but gets even more powerful when we combine it with SVGs.\u003C\u002Fp\u003E\u003Cp\u003E\u003Cstrong\u003EScalable Vector Graphics\u003C\u002Fstrong\u003E (SVGs) are ways of delivering illustrated graphics where instead of distributing a file containing a pixel map – we tell the computer how to draw the picture on the fly using math. It’s an amazing way of creating graphics for the web because by nature of the medium, it’s scalable to any screen size, dimension, etc. without any loss in quality. And because it’s displayed in the DOM, we can use GSAP to bring SVGs to life and create scalable, web-based motion graphics. It’s magic.\u003C\u002Fp\u003E\u003Ch2\u003E\u003Cstrong\u003EPlanning: the important boring work.\u003C\u002Fstrong\u003E\u003C\u002Fh2\u003E\u003Cp\u003EIf you’re like me, your first instinct might be to grab your logo, jump into GSAP, and start trying to hack something together. However, I strongly recommend taking 15 minutes to sit down with pencil and paper and plan your animation. This is best practice when you’re doing any kind of animation and because SVG and GSAP are a little more “bare-metal” of a process, it’s even more true here.\u003C\u002Fp\u003E\u003Cp\u003EI’ve decided that for this tutorial, I wanna keep it simple and just have the two paths of our logo stroke in while the whole image rotates and scales. Check out my storyboards below for reference.\u003C\u002Fp\u003E\u003Cp\u003E\u003C\u002Fp\u003E\u003Cimg src=\"https:\u002F\u002Fmedia.graphcms.com\u002FgnqpRCyXTZyLxFSi4wbw\" alt=\"storyboards-1536x527.jpg\" title=\"storyboards-1536x527.jpg\" width=\"1536\" height=\"527\" \u002F\u003E\u003Cp\u003EA crude, low-fidelity storyboard really helps you plan your animation.\u003C\u002Fp\u003E\u003Ch2\u003E\u003Cstrong\u003ELet’s prepare our logo for animation.\u003C\u002Fstrong\u003E\u003C\u002Fh2\u003E\u003Cp\u003EAnother important reason we plan our animation is because it helps us know how to prepare our SVG. See, we can’t just download the SVG off of the Simple Thread website and try to do things like the stroke effect because the lines that make up the logo aren’t actually lines (open paths) with strokes, they’re shapes (closed paths) with fills. So, if we tried to stroke them, all we’d be doing was creating a border around the shape.\u003C\u002Fp\u003E\u003Cp\u003E\u003C\u002Fp\u003E\u003Cimg src=\"https:\u002F\u002Fmedia.graphcms.com\u002FvRuux7EcSRvb8UEejvEz\" alt=\"STLogoStroked_SVG-STATIC-copy-768x688.png\" title=\"STLogoStroked_SVG-STATIC-copy-768x688.png\" width=\"768\" height=\"688\" \u002F\u003E\u003Cp\u003ENotice how the stroke effect applies an outline.\u003C\u002Fp\u003E\u003Cp\u003EAnother thing we need to solve is that we want the effect of the gray and yellow elements being two continuous lines, but right now, if we look at the SVG, each line has two separate elements because of the gaps where the two lines cross over each other.\u003C\u002Fp\u003E\u003Cp\u003ESo, knowing what we want out of this animation, I can go into a tool like Adobe Illustrator or Figma and make sure I prepare each element correctly. I’ll start by making two paths that will make up our yellow and grey lines. Then, I’ll create two shapes that we’ll use as masks for these lines so that as the lines stroke in, they won’t appear where the overlaps are supposed to be. If that sounds confusing, check out the image below that shows how the mask works.\u003C\u002Fp\u003E\u003Cp\u003E\u003C\u002Fp\u003E\u003Cimg src=\"https:\u002F\u002Fmedia.graphcms.com\u002FH0B1Sa72TPOxHz7gBDZw\" alt=\"STLogo-02-768x395.png\" title=\"STLogo-02-768x395.png\" width=\"768\" height=\"395\" \u002F\u003E\u003Cp\u003EThe black shape becomes the grey shapes “mask” and only what the black shape covers is visible.\u003C\u002Fp\u003E\u003Cp\u003ENow that we’ve gotten all of our elements laid out, I’ll export the SVG from Illustrator. However, we’re still not done. Illustrator doesn’t know that the layers we’re going to use as masks for our lines are mask elements so they’re just being displayed in the SVG.\u003C\u002Fp\u003E\u003Cp\u003E\u003C\u002Fp\u003E\u003Cimg src=\"https:\u002F\u002Fmedia.graphcms.com\u002FPlhXmUBTSV6aToz6E4cA\" alt=\"STLogo_SVG-STATIC-768x688.png\" title=\"STLogo_SVG-STATIC-768x688.png\" width=\"768\" height=\"688\" \u002F\u003E\u003Cp\u003EThe black mask shapes aren’t set as masks so they are visible and covering the logo.\u003C\u002Fp\u003E\u003Cp\u003ESo, we need to change the &lt;g&gt; or \u003Cem\u003Egroup\u003C\u002Fem\u003E svg tags for the masks to &lt;mask&gt; tags. Illustrator by default adds IDs to our elements inside the SVG based on the layer names in the Illustrator project. That’s super helpful because those selectors are what we’ll tell our lines to use as masks.\u003C\u002Fp\u003E\u003Cp\u003EAnd after all that boring work, we’ve got an SVG that’s ready for animation! Yay!\u003C\u002Fp\u003E\u003Cp\u003E\u003C\u002Fp\u003E\u003Ciframe\n          width=\"100\"\n          height=\"100\"\n          frameBorder=\"0\"\n          allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n          allowFullScreen\n          title=\"https:\u002F\u002Fcodepen.io\u002Fitsjustdrewit\u002Fembed\u002FyLXmwGm?default-tab=html%2Cresult\"\n          src=\"https:\u002F\u002Fcodepen.io\u002Fitsjustdrewit\u002Fembed\u002FyLXmwGm?default-tab=html%2Cresult\"\n        \u003E\u003C\u002Fiframe\u003E\u003Ch2\u003E\u003Cstrong\u003ELet’s bring it to life with GSAP.\u003C\u002Fstrong\u003E\u003C\u002Fh2\u003E\u003Cp\u003EGSAP has a ton of capabilities we won’t get deep into in this article, so I recommend you head over to the \u003Ca title=\"https:\u002F\u002Fgreensock.com\u002Fget-started\u002F\" href=\"https:\u002F\u002Fgreensock.com\u002Fget-started\u002F\"\u003Egetting started page\u003C\u002Fa\u003E after this. For our purposes, all we need to know about are \u003Cem\u003ETweens\u003C\u002Fem\u003E and \u003Cem\u003ETimelines.\u003C\u002Fem\u003E\u003C\u002Fp\u003E\u003Cp\u003ETween stands for “in-between” and you can think of them as functions that describe a step in your animation. Timelines are just what you think, collections of Tweens put together in a certain order. In the following code snippet, you can see we’re creating a Timeline and adding a Tween using the “from” function.\u003C\u002Fp\u003E\u003Cp\u003EThis Tween says to animate the \u003Ccode\u003E.lines\u003C\u002Fcode\u003E elements to their current state \u003Cem\u003Efrom\u003C\u002Fem\u003E a scale of 0 and a rotation of -400 degrees. So, when we play this Tween back, we get the following:\u003C\u002Fp\u003E\u003Cp\u003E\u003C\u002Fp\u003E\u003Ciframe\n          width=\"100\"\n          height=\"100\"\n          frameBorder=\"0\"\n          allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n          allowFullScreen\n          title=\"https:\u002F\u002Fcodepen.io\u002Fitsjustdrewit\u002Fembed\u002FqBjzWNe?default-tab=html%2Cresult\"\n          src=\"https:\u002F\u002Fcodepen.io\u002Fitsjustdrewit\u002Fembed\u002FqBjzWNe?default-tab=html%2Cresult\"\n        \u003E\u003C\u002Fiframe\u003E\u003Cp\u003EPretty cool, right?!? With just a few lines of code, we’ve brought our static logo to life. But we can make this even more dynamic by leveraging GSAP’s DrawSVG plugin.\u003C\u002Fp\u003E\u003Cp\u003EGSAP has a collection of premium plugins that you get by becoming a member and supporting the open-source project, but they’re all free to use on Codepen so you can play around with them to your heart’s content. To use them, you just have to register them using the \u003Ccode\u003Egsap.registerPlugin()\u003C\u002Fcode\u003E function.\u003C\u002Fp\u003E\u003Cp\u003ENow, we can add two more Tweens to our Timeline: one that strokes in the yellow line from bottom to top, and another that strokes in the grey line from top to bottom. Don’t worry about the syntax for these, you can read more about how to use \u003Ca title=\"https:\u002F\u002Fgreensock.com\u002Fdrawsvg\u002F\" href=\"https:\u002F\u002Fgreensock.com\u002Fdrawsvg\u002F\"\u003EDrawSVG here\u003C\u002Fa\u003E. Now, our logo looks like this:\u003C\u002Fp\u003E\u003Cp\u003E\u003C\u002Fp\u003E\u003Ciframe\n          width=\"100\"\n          height=\"100\"\n          frameBorder=\"0\"\n          allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n          allowFullScreen\n          title=\"https:\u002F\u002Fcodepen.io\u002Fitsjustdrewit\u002Fembed\u002FZEygPKZ?height=450&theme-id=dark&default-tab=result&slug-hash=ZEygPKZ&user=itsjustdrewit&name=cp_embed_5\"\n          src=\"https:\u002F\u002Fcodepen.io\u002Fitsjustdrewit\u002Fembed\u002FZEygPKZ?height=450&theme-id=dark&default-tab=result&slug-hash=ZEygPKZ&user=itsjustdrewit&name=cp_embed_5\"\n        \u003E\u003C\u002Fiframe\u003E\u003Cp\u003EAMAZING! But, hey, where did our rotation go? Well, right now, all of our tweens are just happening consecutively in the order we create them. So, we can’t see our rotation happen because it completes before we’ve even stroked in the lines.\u003C\u002Fp\u003E\u003Cp\u003ETo fix this, all we have to do is change it so our Tweens overlap each other. We can do that by changing the “position” property of our Tweens. You can read more about the syntax of positioning here, but for right now I’ll just add in some parameters and you can play with them in the codepen.\u003C\u002Fp\u003E\u003Cp\u003EAnd just like that, we’ve got our final animation!\u003C\u002Fp\u003E\u003Cp\u003E\u003C\u002Fp\u003E\u003Ciframe\n          width=\"100\"\n          height=\"100\"\n          frameBorder=\"0\"\n          allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n          allowFullScreen\n          title=\"https:\u002F\u002Fcodepen.io\u002Fitsjustdrewit\u002Fembed\u002FdyRLpgo?default-tab=html%2Cresult\"\n          src=\"https:\u002F\u002Fcodepen.io\u002Fitsjustdrewit\u002Fembed\u002FdyRLpgo?default-tab=html%2Cresult\"\n        \u003E\u003C\u002Fiframe\u003E\u003Cp\u003EI hope you enjoyed this introduction of how to bring motion graphics to the web using GSAP and SVG.\u003C\u002Fp\u003E\u003Cp\u003EUntil next time.\u003C\u002Fp\u003E"},featuredImage:{url:"https:\u002F\u002Fmedia.graphcms.com\u002FNH6Y4nFPTy23FLCl0sOq"},author:{id:"ckvh1xueoedsg0b86nqfrztdd",bio:"I'm a designer and software engineer who likes to make stuff on the internet. I make videos and write about things I'm learning.",name:"Drew Lytle",picture:{id:"ckvh1xlx4edqh0b865yue6erb",url:"https:\u002F\u002Fmedia.graphcms.com\u002FDaEP4yDeQkuwmEl0hfrf"}},videoUrl:a,portfolioUrl:a}}],fetch:{},mutations:void 0}}(null)));