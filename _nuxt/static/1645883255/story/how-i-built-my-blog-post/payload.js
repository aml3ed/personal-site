__NUXT_JSONP__("/story/how-i-built-my-blog-post", (function(a){return {data:[{story:{id:"ckvh2h6e8enfk0b86sgwsp56l",title:"How I Built My Blog",publishedAt:"2022-02-07T12:34:09.009794+00:00",content:{html:"\u003Cp\u003EA couple months ago, after working on Lumastic full-time for 2 years, I made the decision to go part-time and get a “real” job. During that journey, I realized how much easier applying and interviewing for positions would be if I had a personal website that documented who I am and the projects I’ve worked on. \u003C\u002Fp\u003E\u003Cp\u003ESo, after I got my job at Simple Thread, I decided to take a couple weekends and make it happen. But, as I quickly found out, there are A LOT of ways to build a simple blog. So, in this post, I’m going to outline why I decided to build mine with \u003Ca target='_blank' title=\"https:\u002F\u002Fnuxtjs.org\" href=\"https:\u002F\u002Fnuxtjs.org\"\u003ENuxtJS\u003C\u002Fa\u003E, \u003Ca target='_blank' title=\"https:\u002F\u002Ftailwindcss.com\u002F\" href=\"https:\u002F\u002Ftailwindcss.com\u002F\"\u003ETailwindCSS\u003C\u002Fa\u003E, and \u003Ca target='_blank' title=\"https:\u002F\u002Fgraphcms.com\u002F\" href=\"https:\u002F\u002Fgraphcms.com\u002F\"\u003EGraphCMS\u003C\u002Fa\u003E.\u003C\u002Fp\u003E\u003Ch2\u003EWait, Nuxt not Next?\u003C\u002Fh2\u003E\u003Cp\u003EI’m a big React fanboy. So, obviously when I started looking for a Server Side Generator (SSG) to build this site I immediately thought of \u003Ca target='_blank' title=\"https:\u002F\u002Fnextjs.org\u002F\" href=\"https:\u002F\u002Fnextjs.org\u002F\"\u003ENext.js\u003C\u002Fa\u003E. However, I thought that a simple project like this would actually be a good opportunity to learn something new. That’s why I chose NuxtJS - a similar framework built around \u003Ca target='_blank' title=\"https:\u002F\u002Fvuejs.org\u002F\" href=\"https:\u002F\u002Fvuejs.org\u002F\"\u003EVueJS\u003C\u002Fa\u003E.\u003C\u002Fp\u003E\u003Cp\u003EI’d heard a lot about Vue and always thought about it as a lesser \u003Ca target='_blank' title=\"https:\u002F\u002Freactjs.org\u002F\" href=\"https:\u002F\u002Freactjs.org\u002F\"\u003EReact\u003C\u002Fa\u003E. And, for some use cases, I still think that. The funky \u003Ccode\u003E:prop\u003C\u002Fcode\u003E &amp; \u003Ccode\u003Ev-directive\u003C\u002Fcode\u003E syntax and  less than great linting and \u003Ca target='_blank' title=\"https:\u002F\u002Fwww.typescriptlang.org\u002F\" href=\"https:\u002F\u002Fwww.typescriptlang.org\u002F\"\u003ETypescript\u003C\u002Fa\u003E support (although that might just be a Nuxt thing) definitely did not leave me jumping aboard the Vue train completely. However, for this project, I’m really grateful I went with Vue. \u003C\u002Fp\u003E\u003Ch3\u003EThe return of true lifecycle methods.\u003C\u002Fh3\u003E\u003Cp\u003EAlthough I never want to go back to writing class-based React components, there is something to be said for having dedicated \u003Ccode\u003EbeforeMount\u003C\u002Fcode\u003E and \u003Ccode\u003Emounted\u003C\u002Fcode\u003E functions. As a developer, it just feels more reliable to have a common function flow across components rather than remembering when to employ \u003Ccode\u003EuseEffect\u003C\u002Fcode\u003E and \u003Ccode\u003EuseLayoutEffect\u003C\u002Fcode\u003E.\u003C\u002Fp\u003E\u003Cp\u003EI utilized these methods a bunch when creating all of the animations on the home page. \u003Ca target='_blank' title=\"https:\u002F\u002Fen.wikipedia.org\u002Fwiki\u002FInbetweening\" href=\"https:\u002F\u002Fen.wikipedia.org\u002Fwiki\u002FInbetweening\"\u003ETweening\u003C\u002Fa\u003E with \u003Ca title=\"https:\u002F\u002Fgreensock.com\u002Fgsap\u002F\" href=\"https:\u002F\u002Fgreensock.com\u002Fgsap\u002F\"\u003EGSAP\u003C\u002Fa\u003E was a lot more pleasurable with the security of using \u003Ccode\u003Emounted\u003C\u002Fcode\u003E in Vue.\u003C\u002Fp\u003E\u003Ch3\u003EComponents have scoped css\u003C\u002Fh3\u003E\u003Cp\u003EMy god, I never realized how much of a hassle using styled components or CSS modules was until writing scoped styles in Vue. Writing HTML and CSS for a component in the same file with a simple PostCSS build process that packs everything together out of the box feels like magic.\u003C\u002Fp\u003E\u003Cp\u003EThis is something I’m begging the React team to steal.\u003C\u002Fp\u003E\u003Ch3\u003ENative Transition Support\u003C\u002Fh3\u003E\u003Cp\u003EVue’s native CSS-based page and component transition support still blows my mind. It’s such an easy and powerful tool that really sets the library apart. I will miss this greatly on my next React project when I have to re-remember how to use \u003Ca target='_blank' title=\"https:\u002F\u002Freactcommunity.org\u002Freact-transition-group\u002F\" href=\"https:\u002F\u002Freactcommunity.org\u002Freact-transition-group\u002F\"\u003EReactTransitionGroup\u003C\u002Fa\u003E.\u003C\u002Fp\u003E\u003Ch3\u003EView Comes First\u003C\u002Fh3\u003E\u003Cp\u003EThis feels like a really minor thing, but as a frontend developer playing a full-stack engineer on TV, I really love how \u003Ccode\u003E.vue\u003C\u002Fcode\u003E files start with…well…the \u003Cem\u003Eview\u003C\u002Fem\u003E.\u003C\u002Fp\u003E\u003Cp\u003EIn React, it can get really annoying opening up a component file and scrolling through a swathe of import statements, business logic, and a big old \u003Ccode\u003Ereturn\u003C\u002Fcode\u003E function before actually getting to see what the component renders to the page. With Vue, it felt a lot easier to toggle between multiple components simply because the context of the actual webpage was always right in front of me at the top of the file.\u003C\u002Fp\u003E\u003Ch3\u003EWait, what was better about React?\u003C\u002Fh3\u003E\u003Cp\u003EHonestly, Vue is really awesome and I had a ton of fun with it. I probably won’t turn to it the next time I’m building a full-fledge web-app. But for marketing sites, blogs, and simple projects like this, I’m really glad I’ve added Vue to the quiver.\u003C\u002Fp\u003E\u003Ch2\u003ENow, let’s talk about TailwindCSS.\u003C\u002Fh2\u003E\u003Cp\u003EFor the design of this site, I wanted to keep it simple and have it evoke the feeling of a personal notebook. So, to implement that design, I decided to use \u003Ca target='_blank' title=\"https:\u002F\u002Ftailwindcss.com\u002F\" href=\"https:\u002F\u002Ftailwindcss.com\u002F\"\u003ETailwindCSS\u003C\u002Fa\u003E.\u003C\u002Fp\u003E\u003Cp\u003EIf you haven’t heard of Tailwind, it’s not your mama’s old-school CSS framework. Unlike \u003Ca title=\"https:\u002F\u002Fgetbootstrap.com\u002F\" href=\"https:\u002F\u002Fgetbootstrap.com\u002F\"\u003EBootstrap\u003C\u002Fa\u003E, \u003Ca target='_blank' title=\"https:\u002F\u002Fchakra-ui.com\u002F\" href=\"https:\u002F\u002Fchakra-ui.com\u002F\"\u003EChakra\u003C\u002Fa\u003E, or \u003Ca target='_blank' title=\"https:\u002F\u002Fbulma.io\u002F\" href=\"https:\u002F\u002Fbulma.io\u002F\"\u003EBulma\u003C\u002Fa\u003E, Tailwind is not a set of layout and component styles. Instead, it’s a set of CSS utility classes that make quickly creating completely customized design systems super easy - especially when combined with component-based JavaScript frameworks like React or Vue.\u003C\u002Fp\u003E\u003Cp\u003EFor example, instead of having base classes from a normal CSS framework like \u003Ccode\u003Ebtn\u003C\u002Fcode\u003E or \u003Ccode\u003Ebtn-primary\u003C\u002Fcode\u003E that you then override with \u003Ccode\u003Eimportant!\u003C\u002Fcode\u003E statements in your own stylesheets, you can string together small CSS utilities like \u003Ccode\u003Epx-3 py-5 uppercase bg-red-400 text-white hover:bg-red-500\u003C\u002Fcode\u003E to create a completely custom button.\u003C\u002Fp\u003E\u003Cp\u003EAt first glance, it might seem more complicated than just adding Bootstrap’s \u003Ccode\u003Ebtn\u003C\u002Fcode\u003E class, but I think that’s like comparing apple’s to oranges. See, Tailwind isn’t a design system, it’s a set of utilities that make it faster to create and iterate your own. \u003C\u002Fp\u003E\u003Cp\u003EWhich means, if you’re working on a solo project and want a prefabricated design system that just works, go with a CSS framework like Bootstrap. However, if you’re a frontend developer that likes to create customize designs, I highly recommend TailwindCSS.\u003C\u002Fp\u003E\u003Cp\u003EWith an incredible compiler that keeps your stylesheet small and only imports the utilities that you’re actually using and AMAZING tooling that makes it almost completely unnecessary to ever leave your code to read documentation, Tailwind truly lives up to the hype.\u003C\u002Fp\u003E\u003Ch2\u003ETying it together with GraphCMS\u003C\u002Fh2\u003E\u003Cp\u003EFinally, let’s talk about the most important part of creating a personal blog: the actual blog. Before this project, I’d only ever used content management systems (CMS) like Wordpress and SquareSpace. So, when I started looking for a headless CMS, my only requirement was that it needed to have a generous free-tier and a simple to use API.\u003C\u002Fp\u003E\u003Cp\u003EI found both of those and more with \u003Ca target='_blank' title=\"https:\u002F\u002Fgraphcms.com\u002F\" href=\"https:\u002F\u002Fgraphcms.com\u002F\"\u003EGraphCMS\u003C\u002Fa\u003E. Not only does their free-forever tier give most developers everything possibly needed, but they also have a great UI that makes it really easy to setup models. And, because it’s based on GraphQL, creating queries with the integrated GraphiQL playground is a breeze.\u003C\u002Fp\u003E\u003Cp\u003EIt’s honestly such a good product that I’m thinking of using it as a way to quickly mock a backend for another project I’m working on. It’s \u003Cem\u003Ethat\u003C\u002Fem\u003E powerful and easy.\u003C\u002Fp\u003E\u003Ch2\u003EConclusions and future improvements\u003C\u002Fh2\u003E\u003Cp\u003EThis quick personal blog was really fun to make. It gave me the opportunity to try some new technologies while leaving me with a nice place to share my thoughts and projects.\u003C\u002Fp\u003E\u003Cp\u003EIn the future, I want to add a simple contact form using \u003Ca title=\"http:\u002F\u002Fformsubmit.co\" href=\"http:\u002F\u002Fformsubmit.co\"\u003Eformsubmit.co\u003C\u002Fa\u003E and figure out how to add support for MDX content so I can add custom components and animations to posts.\u003C\u002Fp\u003E\u003Cp\u003EAll of the code for this site is \u003Ca target='_blank' title=\"https:\u002F\u002Fgithub.com\u002Faml3ed\u002Fpersonal-site\" href=\"https:\u002F\u002Fgithub.com\u002Faml3ed\u002Fpersonal-site\"\u003Eavailable on GitHub\u003C\u002Fa\u003E. So, if you’ve got any implementation questions or have any suggestions for things I should change or add, message me on \u003Ca target='_blank' title=\"https:\u002F\u002Ftwitter.com\u002Fitsjustdrewit\" href=\"https:\u002F\u002Ftwitter.com\u002Fitsjustdrewit\"\u003ETwitter\u003C\u002Fa\u003E or send me an email.\u003C\u002Fp\u003E\u003Cp\u003E\u003C\u002Fp\u003E"},featuredImage:{url:"https:\u002F\u002Fmedia.graphcms.com\u002FlgUCimB1QoaL56e3FnN8"},author:{id:"ckvh1xueoedsg0b86nqfrztdd",bio:"I'm a designer and software engineer who likes to make stuff on the internet. I make videos and write about things I'm learning.",name:"Drew Lytle",picture:{id:"ckvh1xlx4edqh0b865yue6erb",url:"https:\u002F\u002Fmedia.graphcms.com\u002FDaEP4yDeQkuwmEl0hfrf"}},videoUrl:a,portfolioUrl:a}}],fetch:{},mutations:void 0}}(null)));